// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             (unknown)
// source: api/cloudcontrol/v1/cloudcontrol.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCloudControlServiceCancelResourceRequest = "/api.cloudcontrol.v1.CloudControlService/CancelResourceRequest"
const OperationCloudControlServiceCreateResource = "/api.cloudcontrol.v1.CloudControlService/CreateResource"
const OperationCloudControlServiceDeleteResource = "/api.cloudcontrol.v1.CloudControlService/DeleteResource"
const OperationCloudControlServiceGetResource = "/api.cloudcontrol.v1.CloudControlService/Get"
const OperationCloudControlServiceGetResourceRequestStatus = "/api.cloudcontrol.v1.CloudControlService/GetResourceRequestStatus"
const OperationCloudControlServiceListResourceRequests = "/api.cloudcontrol.v1.CloudControlService/ListResourceRequests"
const OperationCloudControlServiceListResources = "/api.cloudcontrol.v1.CloudControlService/ListResources"
const OperationCloudControlServiceUpdateResource = "/api.cloudcontrol.v1.CloudControlService/UpdateResource"

type CloudControlServiceHTTPServer interface {
	// CancelResourceRequest Cancels the specified resource request.
	CancelResourceRequest(context.Context, *CancelResourceRequestRequest) (*CancelResourceRequestResponse, error)
	// CreateResource Creates a new resource.
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	// DeleteResource Deletes the resource by name.
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	// GetResource Gets the resource by name.
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	// GetResourceRequestStatus Gets the specified resource request status.
	GetResourceRequestStatus(context.Context, *GetResourceRequestStatusRequest) (*GetResourceRequestStatusResponse, error)
	// ListResourceRequests List resource requests.
	ListResourceRequests(context.Context, *ListResourceRequestsRequest) (*ListResourceRequestsResponse, error)
	// ListResources Lists all resources.
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	// UpdateResource Updates the resource.
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
}

func RegisterCloudControlServiceHTTPServer(s *http.Server, srv CloudControlServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/cloud-control/create-resource", _CloudControlService_CreateResource0_HTTP_Handler(srv))
	r.POST("/cloud-control/get-resource", _CloudControlService_GetResource0_HTTP_Handler(srv))
	r.POST("/cloud-control/delete-resource", _CloudControlService_DeleteResource0_HTTP_Handler(srv))
	r.POST("/cloud-control/list-resources", _CloudControlService_ListResources0_HTTP_Handler(srv))
	r.POST("/cloud-control/update-resource", _CloudControlService_UpdateResource0_HTTP_Handler(srv))
	r.POST("/cloud-control/cancel-resource-request", _CloudControlService_CancelResourceRequest0_HTTP_Handler(srv))
	r.POST("/cloud-control/get-resource-request-status", _CloudControlService_GetResourceRequestStatus0_HTTP_Handler(srv))
	r.POST("/cloud-control/list-resource-requests", _CloudControlService_ListResourceRequests0_HTTP_Handler(srv))
}

func _CloudControlService_CreateResource0_HTTP_Handler(srv CloudControlServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudControlServiceCreateResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateResource(ctx, req.(*CreateResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateResourceResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudControlService_GetResource0_HTTP_Handler(srv CloudControlServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudControlServiceGetResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResource(ctx, req.(*GetResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudControlService_DeleteResource0_HTTP_Handler(srv CloudControlServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudControlServiceDeleteResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteResource(ctx, req.(*DeleteResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResourceResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudControlService_ListResources0_HTTP_Handler(srv CloudControlServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListResourcesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudControlServiceListResources)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResources(ctx, req.(*ListResourcesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResourcesResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudControlService_UpdateResource0_HTTP_Handler(srv CloudControlServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudControlServiceUpdateResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateResource(ctx, req.(*UpdateResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateResourceResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudControlService_CancelResourceRequest0_HTTP_Handler(srv CloudControlServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelResourceRequestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudControlServiceCancelResourceRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelResourceRequest(ctx, req.(*CancelResourceRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelResourceRequestResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudControlService_GetResourceRequestStatus0_HTTP_Handler(srv CloudControlServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceRequestStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudControlServiceGetResourceRequestStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResourceRequestStatus(ctx, req.(*GetResourceRequestStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceRequestStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudControlService_ListResourceRequests0_HTTP_Handler(srv CloudControlServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListResourceRequestsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudControlServiceListResourceRequests)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResourceRequests(ctx, req.(*ListResourceRequestsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResourceRequestsResponse)
		return ctx.Result(200, reply)
	}
}

type CloudControlServiceHTTPClient interface {
	CancelResourceRequest(ctx context.Context, req *CancelResourceRequestRequest, opts ...http.CallOption) (rsp *CancelResourceRequestResponse, err error)
	CreateResource(ctx context.Context, req *CreateResourceRequest, opts ...http.CallOption) (rsp *CreateResourceResponse, err error)
	DeleteResource(ctx context.Context, req *DeleteResourceRequest, opts ...http.CallOption) (rsp *DeleteResourceResponse, err error)
	GetResource(ctx context.Context, req *GetResourceRequest, opts ...http.CallOption) (rsp *GetResourceResponse, err error)
	GetResourceRequestStatus(ctx context.Context, req *GetResourceRequestStatusRequest, opts ...http.CallOption) (rsp *GetResourceRequestStatusResponse, err error)
	ListResourceRequests(ctx context.Context, req *ListResourceRequestsRequest, opts ...http.CallOption) (rsp *ListResourceRequestsResponse, err error)
	ListResources(ctx context.Context, req *ListResourcesRequest, opts ...http.CallOption) (rsp *ListResourcesResponse, err error)
	UpdateResource(ctx context.Context, req *UpdateResourceRequest, opts ...http.CallOption) (rsp *UpdateResourceResponse, err error)
}

type CloudControlServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCloudControlServiceHTTPClient(client *http.Client) CloudControlServiceHTTPClient {
	return &CloudControlServiceHTTPClientImpl{client}
}

func (c *CloudControlServiceHTTPClientImpl) CancelResourceRequest(ctx context.Context, in *CancelResourceRequestRequest, opts ...http.CallOption) (*CancelResourceRequestResponse, error) {
	var out CancelResourceRequestResponse
	pattern := "/cloud-control/cancel-resource-request"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloudControlServiceCancelResourceRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CloudControlServiceHTTPClientImpl) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...http.CallOption) (*CreateResourceResponse, error) {
	var out CreateResourceResponse
	pattern := "/cloud-control/create-resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloudControlServiceCreateResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CloudControlServiceHTTPClientImpl) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...http.CallOption) (*DeleteResourceResponse, error) {
	var out DeleteResourceResponse
	pattern := "/cloud-control/delete-resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloudControlServiceDeleteResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CloudControlServiceHTTPClientImpl) GetResource(ctx context.Context, in *GetResourceRequest, opts ...http.CallOption) (*GetResourceResponse, error) {
	var out GetResourceResponse
	pattern := "/cloud-control/get-resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloudControlServiceGetResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CloudControlServiceHTTPClientImpl) GetResourceRequestStatus(ctx context.Context, in *GetResourceRequestStatusRequest, opts ...http.CallOption) (*GetResourceRequestStatusResponse, error) {
	var out GetResourceRequestStatusResponse
	pattern := "/cloud-control/get-resource-request-status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloudControlServiceGetResourceRequestStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CloudControlServiceHTTPClientImpl) ListResourceRequests(ctx context.Context, in *ListResourceRequestsRequest, opts ...http.CallOption) (*ListResourceRequestsResponse, error) {
	var out ListResourceRequestsResponse
	pattern := "/cloud-control/list-resource-requests"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloudControlServiceListResourceRequests))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CloudControlServiceHTTPClientImpl) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...http.CallOption) (*ListResourcesResponse, error) {
	var out ListResourcesResponse
	pattern := "/cloud-control/list-resources"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloudControlServiceListResources))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CloudControlServiceHTTPClientImpl) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...http.CallOption) (*UpdateResourceResponse, error) {
	var out UpdateResourceResponse
	pattern := "/cloud-control/update-resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloudControlServiceUpdateResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
