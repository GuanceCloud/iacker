// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/template/v1/template.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Manifest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Manifest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Manifest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ManifestMultiError, or nil
// if none found.
func (m *Manifest) ValidateAll() error {
	return m.validate(true)
}

func (m *Manifest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManifestValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManifestValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManifestValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManifestValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManifestValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManifestValidationError{
				field:  "Outputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDiagnostics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManifestValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManifestValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManifestValidationError{
					field:  fmt.Sprintf("Diagnostics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ManifestMultiError(errors)
	}

	return nil
}

// ManifestMultiError is an error wrapping multiple validation errors returned
// by Manifest.ValidateAll() if the designated constraints aren't met.
type ManifestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManifestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManifestMultiError) AllErrors() []error { return m }

// ManifestValidationError is the validation error returned by
// Manifest.Validate if the designated constraints aren't met.
type ManifestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManifestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManifestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManifestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManifestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManifestValidationError) ErrorName() string { return "ManifestValidationError" }

// Error satisfies the builtin error interface
func (e ManifestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManifest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManifestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManifestValidationError{}

// Validate checks the field values on Inputs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Inputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Inputs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InputsMultiError, or nil if none found.
func (m *Inputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Inputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetResources()))
		i := 0
		for key := range m.GetResources() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResources()[key]
			_ = val

			// no validation rules for Resources[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, InputsValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, InputsValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return InputsValidationError{
						field:  fmt.Sprintf("Resources[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetErrors()))
		i := 0
		for key := range m.GetErrors() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetErrors()[key]
			_ = val

			// no validation rules for Errors[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, InputsValidationError{
							field:  fmt.Sprintf("Errors[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, InputsValidationError{
							field:  fmt.Sprintf("Errors[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return InputsValidationError{
						field:  fmt.Sprintf("Errors[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if m.Options != nil {

		if all {
			switch v := interface{}(m.GetOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputsValidationError{
						field:  "Options",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputsValidationError{
						field:  "Options",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputsValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InputsMultiError(errors)
	}

	return nil
}

// InputsMultiError is an error wrapping multiple validation errors returned by
// Inputs.ValidateAll() if the designated constraints aren't met.
type InputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputsMultiError) AllErrors() []error { return m }

// InputsValidationError is the validation error returned by Inputs.Validate if
// the designated constraints aren't met.
type InputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputsValidationError) ErrorName() string { return "InputsValidationError" }

// Error satisfies the builtin error interface
func (e InputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputsValidationError{}

// Validate checks the field values on Outputs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Outputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Outputs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OutputsMultiError, or nil if none found.
func (m *Outputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Outputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetFiles()))
		i := 0
		for key := range m.GetFiles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFiles()[key]
			_ = val

			// no validation rules for Files[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, OutputsValidationError{
							field:  fmt.Sprintf("Files[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, OutputsValidationError{
							field:  fmt.Sprintf("Files[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return OutputsValidationError{
						field:  fmt.Sprintf("Files[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return OutputsMultiError(errors)
	}

	return nil
}

// OutputsMultiError is an error wrapping multiple validation errors returned
// by Outputs.ValidateAll() if the designated constraints aren't met.
type OutputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutputsMultiError) AllErrors() []error { return m }

// OutputsValidationError is the validation error returned by Outputs.Validate
// if the designated constraints aren't met.
type OutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputsValidationError) ErrorName() string { return "OutputsValidationError" }

// Error satisfies the builtin error interface
func (e OutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputsValidationError{}

// Validate checks the field values on Options with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Options with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OptionsMultiError, or nil if none found.
func (m *Options) ValidateAll() error {
	return m.validate(true)
}

func (m *Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Outdir

	// no validation rules for Vars

	for idx, item := range m.GetProvisioners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OptionsValidationError{
						field:  fmt.Sprintf("Provisioners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OptionsValidationError{
						field:  fmt.Sprintf("Provisioners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OptionsValidationError{
					field:  fmt.Sprintf("Provisioners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OptionsMultiError(errors)
	}

	return nil
}

// OptionsMultiError is an error wrapping multiple validation errors returned
// by Options.ValidateAll() if the designated constraints aren't met.
type OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OptionsMultiError) AllErrors() []error { return m }

// OptionsValidationError is the validation error returned by Options.Validate
// if the designated constraints aren't met.
type OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionsValidationError) ErrorName() string { return "OptionsValidationError" }

// Error satisfies the builtin error interface
func (e OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionsValidationError{}

// Validate checks the field values on Diagnostic with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Diagnostic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Diagnostic with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiagnosticMultiError, or
// nil if none found.
func (m *Diagnostic) ValidateAll() error {
	return m.validate(true)
}

func (m *Diagnostic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Severity

	if len(errors) > 0 {
		return DiagnosticMultiError(errors)
	}

	return nil
}

// DiagnosticMultiError is an error wrapping multiple validation errors
// returned by Diagnostic.ValidateAll() if the designated constraints aren't met.
type DiagnosticMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiagnosticMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiagnosticMultiError) AllErrors() []error { return m }

// DiagnosticValidationError is the validation error returned by
// Diagnostic.Validate if the designated constraints aren't met.
type DiagnosticValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiagnosticValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiagnosticValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiagnosticValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiagnosticValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiagnosticValidationError) ErrorName() string { return "DiagnosticValidationError" }

// Error satisfies the builtin error interface
func (e DiagnosticValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiagnostic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiagnosticValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiagnosticValidationError{}

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on File with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FileMultiError, or nil if none found.
func (m *File) ValidateAll() error {
	return m.validate(true)
}

func (m *File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return FileMultiError(errors)
	}

	return nil
}

// FileMultiError is an error wrapping multiple validation errors returned by
// File.ValidateAll() if the designated constraints aren't met.
type FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMultiError) AllErrors() []error { return m }

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on Provisioner with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Provisioner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Provisioner with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProvisionerMultiError, or
// nil if none found.
func (m *Provisioner) ValidateAll() error {
	return m.validate(true)
}

func (m *Provisioner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if m.Shell != nil {

		if all {
			switch v := interface{}(m.GetShell()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProvisionerValidationError{
						field:  "Shell",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProvisionerValidationError{
						field:  "Shell",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShell()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProvisionerValidationError{
					field:  "Shell",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProvisionerMultiError(errors)
	}

	return nil
}

// ProvisionerMultiError is an error wrapping multiple validation errors
// returned by Provisioner.ValidateAll() if the designated constraints aren't met.
type ProvisionerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvisionerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvisionerMultiError) AllErrors() []error { return m }

// ProvisionerValidationError is the validation error returned by
// Provisioner.Validate if the designated constraints aren't met.
type ProvisionerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionerValidationError) ErrorName() string { return "ProvisionerValidationError" }

// Error satisfies the builtin error interface
func (e ProvisionerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisioner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionerValidationError{}

// Validate checks the field values on ShellProvisioner with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShellProvisioner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShellProvisioner with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShellProvisionerMultiError, or nil if none found.
func (m *ShellProvisioner) ValidateAll() error {
	return m.validate(true)
}

func (m *ShellProvisioner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inline

	if len(errors) > 0 {
		return ShellProvisionerMultiError(errors)
	}

	return nil
}

// ShellProvisionerMultiError is an error wrapping multiple validation errors
// returned by ShellProvisioner.ValidateAll() if the designated constraints
// aren't met.
type ShellProvisionerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShellProvisionerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShellProvisionerMultiError) AllErrors() []error { return m }

// ShellProvisionerValidationError is the validation error returned by
// ShellProvisioner.Validate if the designated constraints aren't met.
type ShellProvisionerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShellProvisionerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShellProvisionerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShellProvisionerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShellProvisionerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShellProvisionerValidationError) ErrorName() string { return "ShellProvisionerValidationError" }

// Error satisfies the builtin error interface
func (e ShellProvisionerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShellProvisioner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShellProvisionerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShellProvisionerValidationError{}
